"""Implementation of statechart lock_controller.
Generated by itemis CREATE code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../lib')))
from yakindu.rx import Observable

class LockController:
	"""Implementation of the state machine LockController.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_door_obstruction,
			main_region_door_obstruction_r1processing_request,
			main_region_idle,
			main_region_step1,
			main_region_step2,
			main_region_step3,
			null_state
		) = range(7)
	
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		
		self.LOW = 0
		self.HIGH = 1
		self.LOW_LVL = 500
		self.HIGH_LVL = 1500
		self.request_lvl_change = None
		self.water_lvl = None
		self.water_lvl_value = None
		self.resume = None
		self.door_obstructed = None
		self.set_request_pending = None
		self.set_request_pending_value = None
		self.set_request_pending_observable = Observable()
		self.set_sensor_broken = None
		self.set_sensor_broken_observable = Observable()
		self.open_flow = None
		self.open_flow_value = None
		self.open_flow_observable = Observable()
		self.close_flow = None
		self.close_flow_value = None
		self.close_flow_observable = Observable()
		self.open_doors = None
		self.open_doors_value = None
		self.open_doors_observable = Observable()
		self.close_doors = None
		self.close_doors_value = None
		self.close_doors_observable = Observable()
		self.green_light = None
		self.green_light_value = None
		self.green_light_observable = Observable()
		self.red_light = None
		self.red_light_value = None
		self.red_light_observable = Observable()
		
		self.__internal_event_queue = queue.Queue()
		self.in_event_queue = queue.Queue()
		self.__current_water_lvl = None
		self.door_obstruction = None
		self.close_door = None
		
		# enumeration of all states:
		self.__State = LockController.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 1
		for __state_index in range(1):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 2
		
		# initializations:
		#Default init sequence for statechart LockController
		self.__current_water_lvl = 0
		self.__completed = False
		self.__do_completion = False
		self.__is_executing = False
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_door_obstruction:
			return (self.__state_vector[0] >= self.__State.main_region_door_obstruction)\
				and (self.__state_vector[0] <= self.__State.main_region_door_obstruction_r1processing_request)
		if s == self.__State.main_region_door_obstruction_r1processing_request:
			return self.__state_vector[0] == self.__State.main_region_door_obstruction_r1processing_request
		if s == self.__State.main_region_idle:
			return self.__state_vector[0] == self.__State.main_region_idle
		if s == self.__State.main_region_step1:
			return self.__state_vector[0] == self.__State.main_region_step1
		if s == self.__State.main_region_step2:
			return self.__state_vector[0] == self.__State.main_region_step2
		if s == self.__State.main_region_step3:
			return self.__state_vector[0] == self.__State.main_region_step3
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(2):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.__internal_event_queue.empty():
			return self.__internal_event_queue.get()
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_door_obstruction(self):
		"""Raise method for event door_obstruction.
		"""
		self.__internal_event_queue.put(self.__raise_door_obstruction_call)
	
	def __raise_door_obstruction_call(self):
		"""Raise callback for event door_obstruction.
		"""
		self.door_obstruction = True
	
	def raise_close_door(self):
		"""Raise method for event close_door.
		"""
		self.__internal_event_queue.put(self.__raise_close_door_call)
	
	def __raise_close_door_call(self):
		"""Raise callback for event close_door.
		"""
		self.close_door = True
	
	def raise_request_lvl_change(self):
		"""Raise method for event request_lvl_change.
		"""
		self.in_event_queue.put(self.__raise_request_lvl_change_call)
		self.run_cycle()
	
	def __raise_request_lvl_change_call(self):
		"""Raise callback for event request_lvl_change.
		"""
		self.request_lvl_change = True
	
	def raise_water_lvl(self, value):
		"""Raise method for event water_lvl.
		"""
		self.in_event_queue.put(lambda: self.__raise_water_lvl_call(value))
		self.run_cycle()
	
	def __raise_water_lvl_call(self, value):
		"""Raise callback for event water_lvl.
		"""
		self.water_lvl = True
		self.water_lvl_value = value
	
	def raise_resume(self):
		"""Raise method for event resume.
		"""
		self.in_event_queue.put(self.__raise_resume_call)
		self.run_cycle()
	
	def __raise_resume_call(self):
		"""Raise callback for event resume.
		"""
		self.resume = True
	
	def raise_door_obstructed(self):
		"""Raise method for event door_obstructed.
		"""
		self.in_event_queue.put(self.__raise_door_obstructed_call)
		self.run_cycle()
	
	def __raise_door_obstructed_call(self):
		"""Raise callback for event door_obstructed.
		"""
		self.door_obstructed = True
	
	def __entry_action_main_region_door_obstruction(self):
		"""Entry action for state 'DoorObstruction'..
		"""
		#Entry action for state 'DoorObstruction'.
		self.timer_service.set_timer(self, 0, (1 * 1000), False)
		
	def __entry_action_main_region_door_obstruction_r1_processing_request(self):
		"""Entry action for state 'ProcessingRequest'..
		"""
		#Entry action for state 'ProcessingRequest'.
		self.timer_service.set_timer(self, 1, (2 * 1000), False)
		self.set_request_pending_observable.next(True)
		self.red_light_observable.next(self.LOW)
		self.set_request_pending_observable.next(True)
		self.red_light_observable.next(self.LOW)
		
	def __entry_action_main_region_idle(self):
		"""Entry action for state 'Idle'..
		"""
		#Entry action for state 'Idle'.
		self.green_light_observable.next(self.LOW)
		self.open_doors_observable.next(self.LOW)
		self.set_request_pending_observable.next(False)
		
	def __entry_action_main_region_step1(self):
		""".
		"""
		#Entry action for state 'step1'.
		self.close_doors_observable.next(self.LOW)
		self.__completed = True
		
	def __entry_action_main_region_step2(self):
		""".
		"""
		#Entry action for state 'step2'.
		self.open_flow_observable.next(self.HIGH)
		self.__completed = True
		
	def __exit_action_main_region_door_obstruction(self):
		"""Exit action for state 'DoorObstruction'..
		"""
		#Exit action for state 'DoorObstruction'.
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_main_region_door_obstruction_r1_processing_request(self):
		"""Exit action for state 'ProcessingRequest'..
		"""
		#Exit action for state 'ProcessingRequest'.
		self.timer_service.unset_timer(self, 1)
		
	def __enter_sequence_main_region_door_obstruction_default(self):
		"""'default' enter sequence for state DoorObstruction.
		"""
		#'default' enter sequence for state DoorObstruction
		self.__entry_action_main_region_door_obstruction()
		self.__enter_sequence_main_region_door_obstruction_r1_default()
		
	def __enter_sequence_main_region_door_obstruction_r1_processing_request_default(self):
		"""'default' enter sequence for state ProcessingRequest.
		"""
		#'default' enter sequence for state ProcessingRequest
		self.__entry_action_main_region_door_obstruction_r1_processing_request()
		self.__state_vector[0] = self.State.main_region_door_obstruction_r1processing_request
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_idle_default(self):
		"""'default' enter sequence for state Idle.
		"""
		#'default' enter sequence for state Idle
		self.__entry_action_main_region_idle()
		self.__state_vector[0] = self.State.main_region_idle
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_step1_default(self):
		"""'default' enter sequence for state step1.
		"""
		#'default' enter sequence for state step1
		self.__entry_action_main_region_step1()
		self.__state_vector[0] = self.State.main_region_step1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_step3_default(self):
		"""'default' enter sequence for state step3.
		"""
		#'default' enter sequence for state step3
		self.__state_vector[0] = self.State.main_region_step3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		#'default' enter sequence for region main region
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_door_obstruction_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_door_obstruction_r1__entry_default()
		
	def __exit_sequence_main_region_door_obstruction(self):
		"""Default exit sequence for state DoorObstruction.
		"""
		#Default exit sequence for state DoorObstruction
		self.__exit_sequence_main_region_door_obstruction_r1()
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_door_obstruction()
		
	def __exit_sequence_main_region_door_obstruction_r1_processing_request(self):
		"""Default exit sequence for state ProcessingRequest.
		"""
		#Default exit sequence for state ProcessingRequest
		self.__state_vector[0] = self.State.main_region_door_obstruction
		self.__exit_action_main_region_door_obstruction_r1_processing_request()
		
	def __exit_sequence_main_region_idle(self):
		"""Default exit sequence for state Idle.
		"""
		#Default exit sequence for state Idle
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_step1(self):
		"""Default exit sequence for state step1.
		"""
		#Default exit sequence for state step1
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_step2(self):
		"""Default exit sequence for state step2.
		"""
		#Default exit sequence for state step2
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_step3(self):
		"""Default exit sequence for state step3.
		"""
		#Default exit sequence for state step3
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		#Default exit sequence for region main region
		state = self.__state_vector[0]
		if state == self.State.main_region_door_obstruction:
			self.__exit_sequence_main_region_door_obstruction()
		elif state == self.State.main_region_door_obstruction_r1processing_request:
			self.__exit_sequence_main_region_door_obstruction_r1_processing_request()
			self.__exit_action_main_region_door_obstruction()
		elif state == self.State.main_region_idle:
			self.__exit_sequence_main_region_idle()
		elif state == self.State.main_region_step1:
			self.__exit_sequence_main_region_step1()
		elif state == self.State.main_region_step2:
			self.__exit_sequence_main_region_step2()
		elif state == self.State.main_region_step3:
			self.__exit_sequence_main_region_step3()
		
	def __exit_sequence_main_region_door_obstruction_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_door_obstruction_r1processing_request:
			self.__exit_sequence_main_region_door_obstruction_r1_processing_request()
		
	def __react_main_region_door_obstruction_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_door_obstruction_r1_processing_request_default()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_idle_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		#State machine reactions.
		return transitioned_before
	
	
	def __main_region_door_obstruction_react(self, transitioned_before):
		"""Implementation of __main_region_door_obstruction_react function.
		"""
		#The reactions of state DoorObstruction.
		transitioned_after = self.__react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if (self.__time_events[0]) and (self.door_obstructed):
					self.__exit_sequence_main_region_door_obstruction()
					self.raise_door_obstruction()
					self.__time_events[0] = False
					self.__enter_sequence_main_region_door_obstruction_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_door_obstruction_r1_processing_request_react(self, transitioned_before):
		"""Implementation of __main_region_door_obstruction_r1_processing_request_react function.
		"""
		#The reactions of state ProcessingRequest.
		transitioned_after = self.__main_region_door_obstruction_react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.__time_events[1]:
					self.__exit_sequence_main_region_door_obstruction()
					self.raise_close_door()
					self.__time_events[1] = False
					self.__enter_sequence_main_region_step1_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_idle_react(self, transitioned_before):
		"""Implementation of __main_region_idle_react function.
		"""
		#The reactions of state Idle.
		transitioned_after = self.__react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.request_lvl_change:
					self.__exit_sequence_main_region_idle()
					self.__enter_sequence_main_region_door_obstruction_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_step1_react(self, transitioned_before):
		"""Implementation of __main_region_step1_react function.
		"""
		#The reactions of state step1.
		transitioned_after = self.__react(transitioned_before)
		if self.__do_completion:
			#Default exit sequence for state step1
			self.__state_vector[0] = self.State.null_state
			#'default' enter sequence for state step2
			self.__entry_action_main_region_step2()
			self.__state_vector[0] = self.State.main_region_step2
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __main_region_step2_react(self, transitioned_before):
		"""Implementation of __main_region_step2_react function.
		"""
		#The reactions of state step2.
		transitioned_after = self.__react(transitioned_before)
		if self.__do_completion:
			#Default exit sequence for state step2
			self.__state_vector[0] = self.State.null_state
			#The reactions of state null.
			if self.__current_water_lvl >= (self.HIGH_LVL - 30):
				self.__enter_sequence_main_region_step3_default()
		return transitioned_after
	
	
	def __main_region_step3_react(self, transitioned_before):
		"""Implementation of __main_region_step3_react function.
		"""
		#The reactions of state step3.
		return self.__react(transitioned_before)
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.request_lvl_change = False
		self.water_lvl = False
		self.resume = False
		self.door_obstructed = False
		self.__time_events[0] = False
		self.__time_events[1] = False
	
	
	def __clear_internal_events(self):
		"""Implementation of __clear_internal_events function.
		"""
		self.door_obstruction = False
		self.close_door = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_door_obstruction_r1processing_request:
			self.__main_region_door_obstruction_r1_processing_request_react(-1)
		elif state == self.State.main_region_idle:
			self.__main_region_idle_react(-1)
		elif state == self.State.main_region_step1:
			self.__main_region_step1_react(-1)
		elif state == self.State.main_region_step2:
			self.__main_region_step2_react(-1)
		elif state == self.State.main_region_step3:
			self.__main_region_step3_react(-1)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		#Performs a 'run to completion' step.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__do_completion = False
			condition_1 = True
			while condition_1:
				if self.__completed:
					self.__do_completion = True
				self.__completed = False
				self.__micro_step()
				self.__do_completion = False
				condition_1 = self.__completed
			self.__clear_in_events()
			self.__clear_internal_events()
			condition_0 = False
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
				condition_0 = True
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		#Activates the state machine.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default enter sequence for statechart LockController
		self.__enter_sequence_main_region_default()
		self.__do_completion = False
		condition_0 = True
		while condition_0:
			if self.__completed:
				self.__do_completion = True
			self.__completed = False
			self.__micro_step()
			self.__do_completion = False
			condition_0 = self.__completed
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		#Deactivates the state machine.
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default exit sequence for statechart LockController
		self.__exit_sequence_main_region()
		self.__state_vector[0] = self.State.null_state
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
